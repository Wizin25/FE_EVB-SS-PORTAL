import React, { useState, useEffect } from 'react';
import { useNavigate } from "react-router-dom";
import Header from '../Home/header';
import Footer from '../Home/footer';
import './Contact.css';

const SupportCenter = () => {
  const navigate = useNavigate();
  const [theme, setTheme] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') || 'light';
    }
    return 'light';
  });

  const [user, setUser] = useState(null);
  const [unreadCount, setUnreadCount] = useState(0);
  const [nextBooking, setNextBooking] = useState(null);

  // Theme toggle handler
  const handleToggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);

    const root = document.documentElement;
    if (newTheme === "dark") {
      root.classList.add("dark");
      document.body.classList.add("dark");
      localStorage.setItem("theme", "dark");
    } else {
      root.classList.remove("dark");
      document.body.classList.remove("dark");
      localStorage.setItem("theme", "light");
    }
  };

  useEffect(() => {
    // Initialize theme
    const savedTheme = localStorage.getItem('theme') || 'light';
    setTheme(savedTheme);

    const root = document.documentElement;
    if (savedTheme === 'dark') {
      root.classList.add('dark');
      document.body.classList.add('dark');
    }

    // Fetch data (gi·ªëng nh∆∞ trong HomePage)
    const fetchData = async () => {
      try {
        // Fetch user profile - gi·∫£ s·ª≠ c√≥ API
        // const userRes = await api.get("/me");
        // setUser(userRes.data);
        setUser({ name: "User", profileUrl: "https://ui-avatars.com/api/?name=U&background=eee&color=888" });
      } catch (error) {
        console.error("Error fetching user:", error);
      }

      try {
        // Fetch unread notifications count
        // const notificationRes = await api.get("/notifications/unread-count");
        // setUnreadCount(notificationRes.data.count);
        setUnreadCount(3); // Gi√° tr·ªã m·∫´u
      } catch (error) {
        setUnreadCount(0);
      }

      try {
        // Fetch next booking
        // const bookingRes = await api.get("/bookings/next");
        // setNextBooking(bookingRes.data);
        setNextBooking(null); // Ho·∫∑c d·ªØ li·ªáu m·∫´u
      } catch (error) {
        setNextBooking(null);
      }
    };

    fetchData();
  }, []);

  const handleOpenBooking = () => {
    window.location.href = "/booking";
  };

  const [activeTab, setActiveTab] = useState('general');
  const [searchQuery, setSearchQuery] = useState('');
  const [expandedFaq, setExpandedFaq] = useState(null);

  const supportCategories = [
    {
      id: 'general',
      icon: 'üí¨',
      title: 'H·ªó tr·ª£ chung',
      description: 'C√¢u h·ªèi v·ªÅ d·ªãch v·ª• v√† t√†i kho·∫£n',
      color: '#3B82F6'
    },
    {
      id: 'technical',
      icon: 'üîß',
      title: 'V·∫•n ƒë·ªÅ k·ªπ thu·∫≠t',
      description: 'S·ª± c·ªë tr·∫°m v√† ·ª©ng d·ª•ng',
      color: '#10B981'
    },
    {
      id: 'billing',
      icon: 'üí≥',
      title: 'Thanh to√°n',
      description: 'H√≥a ƒë∆°n v√† g√≥i d·ªãch v·ª•',
      color: '#F59E0B'
    },
    {
      id: 'booking',
      icon: 'üìÖ',
      title: 'ƒê·∫∑t l·ªãch',
      description: 'ƒê·∫∑t v√† h·ªßy l·ªãch h·∫πn',
      color: '#EF4444'
    }
  ];

  const faqData = {
    general: [
      {
        question: 'L√†m th·∫ø n√†o ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n SwapX?',
        answer: 'B·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n th√¥ng qua ·ª©ng d·ª•ng SwapX tr√™n iOS/Android ho·∫∑c truy c·∫≠p website v√† ch·ªçn "ƒêƒÉng k√Ω". Ch·ªâ c·∫ßn s·ªë ƒëi·ªán tho·∫°i v√† email l√† c√≥ th·ªÉ t·∫°o t√†i kho·∫£n ngay.',
        tags: ['ƒëƒÉng k√Ω', 't√†i kho·∫£n']
      },
      {
        question: 'SwapX ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?',
        answer: 'SwapX cung c·∫•p d·ªãch v·ª• thu√™ pin xe ƒëi·ªán theo m√¥ h√¨nh ƒë·ªïi pin nhanh. B·∫°n ƒë·∫øn tr·∫°m, qu√©t m√£ QR v√† h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ƒë·ªïi pin ƒë√£ s·∫°c ƒë·∫ßy cho b·∫°n trong v√≤ng 2 ph√∫t.',
        tags: ['ho·∫°t ƒë·ªông', 'gi·ªõi thi·ªáu']
      },
      {
        question: 'L√†m sao ƒë·ªÉ t√¨m tr·∫°m ƒë·ªïi pin g·∫ßn nh·∫•t?',
        answer: 'Trong ·ª©ng d·ª•ng ho·∫∑c website, ch·ªçn m·ª•c "Tr·∫°m" ƒë·ªÉ xem b·∫£n ƒë·ªì v√† danh s√°ch c√°c tr·∫°m g·∫ßn b·∫°n. H·ªá th·ªëng s·∫Ω hi·ªÉn th·ªã kho·∫£ng c√°ch, s·ªë pin c√≥ s·∫µn v√† ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng.',
        tags: ['tr·∫°m', 'v·ªã tr√≠']
      }
    ],
    technical: [
      {
        question: '·ª®ng d·ª•ng b√°o l·ªói k·∫øt n·ªëi ph·∫£i l√†m sao?',
        answer: 'H√£y ki·ªÉm tra k·∫øt n·ªëi internet, kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng. N·∫øu v·∫´n l·ªói, h√£y x√≥a cache ·ª©ng d·ª•ng ho·∫∑c c·∫≠p nh·∫≠t l√™n phi√™n b·∫£n m·ªõi nh·∫•t t·ª´ App Store/Google Play.',
        tags: ['·ª©ng d·ª•ng', 'l·ªói']
      },
      {
        question: 'M√°y ƒë·ªïi pin kh√¥ng ho·∫°t ƒë·ªông?',
        answer: 'Vui l√≤ng th·ª≠ l·∫°i sau 2 ph√∫t. N·∫øu v·∫´n kh√¥ng ho·∫°t ƒë·ªông, h√£y li√™n h·ªá hotline 1900 1234 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ k·ªπ thu·∫≠t ngay l·∫≠p t·ª©c. Ch√∫ng t√¥i c√≥ ƒë·ªôi ng≈© k·ªπ thu·∫≠t 24/7.',
        tags: ['tr·∫°m', 'k·ªπ thu·∫≠t']
      },
      {
        question: 'QR Code kh√¥ng qu√©t ƒë∆∞·ª£c?',
        answer: 'ƒê·∫£m b·∫£o ƒë·ªß √°nh s√°ng, lau s·∫°ch camera. N·∫øu v·∫´n kh√¥ng ƒë∆∞·ª£c, b·∫°n c√≥ th·ªÉ nh·∫≠p m√£ tr·∫°m th·ªß c√¥ng ho·∫∑c s·ª≠ d·ª•ng t√≠nh nƒÉng "Nh·∫≠n di·ªán v·ªã tr√≠" trong ·ª©ng d·ª•ng.',
        tags: ['QR', 'qu√©t m√£']
      }
    ],
    billing: [
      {
        question: 'C√°c ph∆∞∆°ng th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c ch·∫•p nh·∫≠n?',
        answer: 'SwapX ch·∫•p nh·∫≠n v√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay), th·∫ª ng√¢n h√†ng, th·∫ª t√≠n d·ª•ng v√† ti·ªÅn m·∫∑t t·∫°i tr·∫°m. T·∫•t c·∫£ giao d·ªãch ƒë·ªÅu ƒë∆∞·ª£c b·∫£o m·∫≠t v√† m√£ h√≥a.',
        tags: ['thanh to√°n', 'ti·ªÅn']
      },
      {
        question: 'L√†m th·∫ø n√†o ƒë·ªÉ h·ªßy g√≥i d·ªãch v·ª•?',
        answer: 'V√†o m·ª•c "G√≥i d·ªãch v·ª•" trong ·ª©ng d·ª•ng, ch·ªçn g√≥i ƒëang s·ª≠ d·ª•ng v√† nh·∫•n "H·ªßy g√≥i". L∆∞u √Ω: ch·ªâ c√≥ th·ªÉ h·ªßy v√†o cu·ªëi chu k·ª≥ thanh to√°n.',
        tags: ['h·ªßy', 'g√≥i d·ªãch v·ª•']
      }
    ],
    booking: [
      {
        question: 'C√≥ th·ªÉ ƒë·∫∑t l·ªãch tr∆∞·ªõc bao l√¢u?',
        answer: 'B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch tr∆∞·ªõc t·ªëi ƒëa 7 ng√†y. Khuy·∫øn ngh·ªã ƒë·∫∑t tr∆∞·ªõc √≠t nh·∫•t 2 gi·ªù ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ch·ªó.',
        tags: ['ƒë·∫∑t l·ªãch', 'th·ªùi gian']
      },
      {
        question: 'H·ªßy l·ªãch h·∫πn c√≥ b·ªã ph√≠ kh√¥ng?',
        answer: 'H·ªßy tr∆∞·ªõc 2 gi·ªù: mi·ªÖn ph√≠. H·ªßy trong v√≤ng 2 gi·ªù: ph√≠ 20.000ƒë. Kh√¥ng ƒë·∫øn v√† kh√¥ng h·ªßy: ph√≠ 50.000ƒë.',
        tags: ['h·ªßy l·ªãch', 'ph√≠']
      }
    ]
  };

  const contactMethods = [
    {
      icon: 'üìû',
      title: 'Hotline 24/7',
      number: '1900 1234',
      description: 'H·ªó tr·ª£ nhanh nh·∫•t',
      available: true
    },
    {
      icon: 'üí¨',
      title: 'Zalo OA',
      number: '@SwapXSupport',
      description: 'Chat tr·ª±c tuy·∫øn',
      available: true
    },
    {
      icon: '‚úâÔ∏è',
      title: 'Email',
      number: 'support@swapx.vn',
      description: 'Ph·∫£n h·ªìi trong 2h',
      available: true
    },
    {
      icon: 'üè™',
      title: 'Tr·∫°m h·ªó tr·ª£',
      number: 'H√† N·ªôi & TP.HCM',
      description: 'H·ªó tr·ª£ tr·ª±c ti·∫øp',
      available: true
    }
  ];

  const toggleFaq = (index) => {
    setExpandedFaq(expandedFaq === index ? null : index);
  };

  const filteredFaqs = faqData[activeTab].filter(faq =>
    faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
    faq.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  return (
    <div
      className={`min-h-screen transition-colors duration-300 ${theme === 'dark'
          ? 'bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900'
          : 'bg-gradient-to-br from-blue-50 via-white to-green-50'
        }`}
    >
      {/* Header */}
      <div style={{ position: 'sticky', top: 0, zIndex: 50 }}>
        <Header
          onToggleTheme={handleToggleTheme}
          theme={theme}
          user={user}
          unreadCount={unreadCount}
          nextBooking={nextBooking}
          onOpenBooking={handleOpenBooking}
        />
      </div>

      <div className={`support-center ${theme}`}>
        <div className="support-wrapper">
          {/* Hero Section */}
          <section className="support-hero">
            <div className="hero-content">
              <div className="hero-badge">üéØ Trung t√¢m h·ªó tr·ª£</div>
              <h1>Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n</h1>
              <p>Gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc v·ªÅ d·ªãch v·ª• SwapX. T√¨m c√¢u tr·∫£ l·ªùi nhanh ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ 24/7.</p>
              
              <div className="search-container">
                <input
                  type="text"
                  placeholder="üîç T√¨m ki·∫øm c√¢u h·ªèi th∆∞·ªùng g·∫∑p..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="search-input"
                />
              </div>
            </div>
            <div className="hero-graphics">
              <div className="floating-icon">üîã</div>
              <div className="floating-icon">‚ö°</div>
              <div className="floating-icon">üì±</div>
            </div>
          </section>

          {/* Contact Methods */}
          <section className="contact-methods-section">
            <div className="section-headerh">
              <h2>Li√™n h·ªá h·ªó tr·ª£</h2>
              <p>Nhi·ªÅu c√°ch ƒë·ªÉ k·∫øt n·ªëi v·ªõi ch√∫ng t√¥i</p>
            </div>
            <div className="contact-methods-grid">
              {contactMethods.map((method, index) => (
                <div key={index} className="contact-method-card">
                  <div className="method-icon">{method.icon}</div>
                  <div className="method-content">
                    <h3>{method.title}</h3>
                    <p className="method-number">{method.number}</p>
                    <p className="method-description">{method.description}</p>
                  </div>
                  <div className={`availability ${method.available ? 'available' : 'busy'}`}>
                    {method.available ? 'üü¢ S·∫µn s√†ng' : 'üî¥ B·∫≠n'}
                  </div>
                </div>
              ))}
            </div>
          </section>

          {/* FAQ Categories */}
          <section className="faq-section">
            <div className="section-headerh">
              <h2>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
              <p>Ch·ªçn ch·ªß ƒë·ªÅ ƒë·ªÉ xem c√¢u tr·∫£ l·ªùi</p>
            </div>

            <div className="category-tabs">
              {supportCategories.map(category => (
                <button
                  key={category.id}
                  className={`category-tab ${activeTab === category.id ? 'active' : ''}`}
                  onClick={() => {
                    setActiveTab(category.id);
                    setSearchQuery('');
                    setExpandedFaq(null);
                  }}
                  style={{
                    '--accent-color': category.color
                  }}
                >
                  <span className="tab-icon">{category.icon}</span>
                  <div className="tab-content">
                    <h4>{category.title}</h4>
                    <p>{category.description}</p>
                  </div>
                </button>
              ))}
            </div>

            {/* FAQ List */}
            <div className="faq-list">
              {filteredFaqs.length > 0 ? (
                filteredFaqs.map((faq, index) => (
                  <div
                    key={index}
                    className={`faq-item ${expandedFaq === index ? 'expanded' : ''}`}
                  >
                    <div
                      className="faq-question"
                      onClick={() => toggleFaq(index)}
                    >
                      <h3>{faq.question}</h3>
                      <span className="expand-icon">
                        {expandedFaq === index ? '‚àí' : '+'}
                      </span>
                    </div>
                    <div className="faq-answer">
                      <p>{faq.answer}</p>
                      <div className="faq-tags">
                        {faq.tags.map((tag, tagIndex) => (
                          <span key={tagIndex} className="tag">#{tag}</span>
                        ))}
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="no-results">
                  <div className="no-results-icon">üîç</div>
                  <h3>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p</h3>
                  <p>H√£y th·ª≠ t·ª´ kh√≥a t√¨m ki·∫øm kh√°c ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i</p>
                </div>
              )}
            </div>
          </section>

          {/* Emergency Support */}
          <section className="emergency-section">
            <div className="emergency-card">
              <div className="emergency-content">
                <div className="emergency-icon">üö®</div>
                <div className="emergency-text">
                  <h3>H·ªó tr·ª£ kh·∫©n c·∫•p</h3>
                  <p>G·∫∑p s·ª± c·ªë nghi√™m tr·ªçng t·∫°i tr·∫°m? C·∫ßn h·ªó tr·ª£ ngay l·∫≠p t·ª©c?</p>
                </div>
                <div className="emergency-actions">
                  <button className="emergency-btn primary">
                    ‚ö†Ô∏è Report
                  </button>
                </div>
              </div>
            </div>
          </section>

          {/* Feedback Section */}
          <section className="feedback-section">
            <div className="feedback-card">
              <div className="feedback-content">
                <h2>Ch∆∞a t√¨m th·∫•y c√¢u tr·∫£ l·ªùi?</h2>
                <p>ƒê·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n</p>
                <div className="feedback-actions">
                  <button className="feedback-btn primary">
                    üìû G·ªçi h·ªó tr·ª£
                  </button>
                  <button className="feedback-btn secondary">
                    ‚úâÔ∏è G·ª≠i y√™u c·∫ßu
                  </button>
                </div>
              </div>
              <div className="feedback-graphic">
                <div className="support-avatar">üë®‚Äçüíº</div>
              </div>
            </div>
          </section>
        </div>
      </div>

      {/* Footer */}
      <Footer theme={theme} />
    </div>
  );
};

export default SupportCenter;