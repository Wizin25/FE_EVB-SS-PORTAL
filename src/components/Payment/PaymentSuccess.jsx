import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import HeaderDriver from '../Home/header';
import Footer from '../Home/footer';
import { authAPI } from '../services/authAPI';
import { vehicleAPI } from '../services/vehicleAPI';

const PAYMENT_CTX = 'paymentCtx'; // context d√πng chung cho m·ªçi thanh to√°n qua PayOS

export default function PaymentSuccess() {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [theme, setTheme] = useState(() => localStorage.getItem("theme") || "light");

  const [orderId, setOrderId] = useState('');
  const [status, setStatus] = useState('Pending');
  const [serviceType, setServiceType] = useState('PrePaid'); // m·∫∑c ƒë·ªãnh
  const [total, setTotal] = useState(0);
  const [message, setMessage] = useState('ƒêang x√°c minh thanh to√°n‚Ä¶');
  const [attaching, setAttaching] = useState(false);
  const [doneAttach, setDoneAttach] = useState(false);

  useEffect(() => {
    const root = document.documentElement;
    if (theme === "dark") { root.classList.add("dark"); document.body.classList.add("dark"); }
  }, [theme]);

  useEffect(() => {
    const run = async () => {
      try {
        // 1) L·∫•y orderId t·ª´ URL ho·∫∑c session (lu√¥n HI·ªÇN TH·ªä orderId cho ng∆∞·ªùi d√πng)
        const ctxStr = sessionStorage.getItem(PAYMENT_CTX);
        const ctx = ctxStr ? JSON.parse(ctxStr) : {};
        const qsOrderId = searchParams.get('orderId') || searchParams.get('orderCode'); // BE c√≥ th·ªÉ tr·∫£ orderCode
        const oid = qsOrderId || ctx?.orderId;
        if (!oid) { setMessage('Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n h√†ng (orderId).'); return; }
        setOrderId(String(oid));

        // serviceType fallback t·ª´ context (BE c√≥ th·ªÉ tr·∫£ trong getOrderById)
        if (ctx?.serviceType) setServiceType(ctx.serviceType);

        // 2) X√°c minh tr·∫°ng th√°i thanh to√°n (poll ng·∫Øn 6 l·∫ßn, m·ªói 1.5s)
        setMessage('ƒêang x√°c minh tr·∫°ng th√°i ƒë∆°n h√†ng‚Ä¶');
        let info = null, st = 'Pending';
        for (let i = 0; i < 6; i++) {
          const res = await authAPI.getOrderById(oid);
          info = res?.data || res;
          const maybeStatus = (info?.status || info?.Status || '').toString();
          const maybeType   = (info?.serviceType || info?.ServiceType || ctx?.serviceType || '').toString();
          const maybeTotal  = Number(info?.total ?? info?.Total ?? ctx?.total ?? 0);

          if (maybeType) setServiceType(maybeType);
          setTotal(maybeTotal);
          st = maybeStatus || st;
          setStatus(st);

          if (/paid|completed|success/i.test(st)) break;
          await new Promise(r => setTimeout(r, 1500));
        }

        // 3) N·∫øu ch∆∞a x√°c nh·∫≠n Paid
        if (!/paid|completed|success/i.test(st)) {
          setMessage('H·ªá th·ªëng ch∆∞a ghi nh·∫≠n thanh to√°n th√†nh c√¥ng. Vui l√≤ng ƒë·ª£i th√™m ho·∫∑c th·ª≠ l·∫°i sau.');
          return;
        }

        // 4) ƒê√£ Paid
        setMessage('Thanh to√°n ƒë√£ x√°c nh·∫≠n ‚úì');

        // 5) N·∫øu l√† Package ‚Üí g·∫Øn g√≥i v√†o xe (PrePaid th√¨ KH√îNG g·∫Øn g√¨)
        const isPackage = /package/i.test(serviceType);
        if (isPackage) {
          const vin = ctx?.vin;
          const packageId = ctx?.packageId;
          if (!vin || !packageId) {
            setMessage(prev => prev + ' ‚Äî Thi·∫øu VIN ho·∫∑c PackageId ƒë·ªÉ k√≠ch ho·∫°t g√≥i.');
          } else {
            try {
              setAttaching(true);
              setMessage('ƒêang k√≠ch ho·∫°t g√≥i cho xe‚Ä¶');
              const attachRes = await vehicleAPI.addVehicleInPackage({ Vin: vin, PackageId: packageId });
              const ok = attachRes?.isSuccess || attachRes?.data?.isSuccess || attachRes?.status === 200;
              if (!ok) throw new Error(attachRes?.message || 'K√≠ch ho·∫°t g√≥i th·∫•t b·∫°i');
              setDoneAttach(true);
              setMessage('G√≥i ƒë√£ ƒë∆∞·ª£c g·∫Øn v√†o xe th√†nh c√¥ng!');
            } catch (e) {
              setMessage(e?.message || 'C√≥ l·ªói khi g·∫Øn g√≥i v√†o xe.');
            } finally {
              setAttaching(false);
            }
          }
        }

        // 6) Xo√° context d√πng m·ªôt l·∫ßn
        sessionStorage.removeItem(PAYMENT_CTX);
      } catch (e) {
        setMessage(e?.message || 'C√≥ l·ªói x·∫£y ra khi x√°c minh thanh to√°n.');
      }
    };
    run();
  }, [searchParams]);

  // UI helpers
  const StatusBadge = ({ value }) => {
    const v = (value || '').toLowerCase();
    const bg = /paid|success|completed/.test(v) ? '#059669'
       : /pending|processing/.test(v) ? '#d97706'
       : '#ef4444';
    return (
      <span style={{
        display:'inline-block', padding:'4px 10px', borderRadius:9999,
        color:'#fff', background:bg, fontSize:12, letterSpacing:0.2
      }}>{value || 'Unknown'}</span>
    );
  };

  const go = (path) => () => navigate(path);

  return (
    <div className={`min-h-screen ${theme === 'dark' ? 'bg-gray-900' : 'bg-white'}`} style={{ maxHeight: "calc(100vh - 120px)", overflowY: "auto" }}>
      <div style={{ position: 'sticky', top: 0, zIndex: 50 }}>
        <HeaderDriver onToggleTheme={() => setTheme(t => t==='dark'?'light':'dark')} theme={theme} user={null} unreadCount={0} nextBooking={null} onOpenBooking={() => {}} />
      </div>

      <div style={{ maxWidth: 900, margin: '2rem auto', padding: '0 1rem' }}>
        <div style={{
          textAlign:'center', marginBottom:'1.5rem',
          background: theme==='dark'?'linear-gradient(135deg,#232946 0%,#1f2937 100%)':'linear-gradient(135deg,#e0ffe7 0%,#b2f5ea 100%)',
          padding:'1.75rem 1.25rem', borderRadius:24
        }}>
          <div style={{fontSize:'2.5rem', marginBottom:10}}>‚úÖ</div>
          <h1 style={{margin:0, color: theme==='dark'?'#fff':'#059669'}}>Thanh to√°n th√†nh c√¥ng</h1>
          <p style={{opacity:0.92, marginTop:8}}>{message}</p>
        </div>

        {/* Th·∫ª th√¥ng tin ƒë∆°n h√†ng (HI·ªÇN TH·ªä orderId r√µ r√†ng) */}
        <div style={{
          background: theme==='dark'?'#111827':'#ffffff',
          border: '1px solid ' + (theme==='dark'?'#374151':'#e5e7eb'),
          borderRadius: 16, padding: '1.25rem', marginBottom: '1.5rem'
        }}>
          <div style={{display:'grid', gridTemplateColumns:'1fr 1fr', gap:10}}>
            <div><strong>M√£ ƒë∆°n h√†ng (orderId):</strong><br/>{orderId || '‚Äî'}</div>
            <div><strong>Lo·∫°i d·ªãch v·ª•:</strong><br/>{serviceType}</div>
            <div><strong>S·ªë ti·ªÅn:</strong><br/>{Number(total || 0).toLocaleString('vi-VN')} VND</div>
            <div><strong>Tr·∫°ng th√°i:</strong><br/><StatusBadge value={status}/></div>
          </div>
          {/* G·ª£i √Ω h√†nh ƒë·ªông theo lo·∫°i d·ªãch v·ª• */}
          <div style={{marginTop:12, fontSize:14, opacity:0.9}}>
            { /package/i.test(serviceType)
              ? (attaching ? 'ƒêang k√≠ch ho·∫°t g√≥i v√†o xe‚Ä¶'
                : doneAttach ? 'G√≥i ƒë√£ k√≠ch ho·∫°t. B·∫°n c√≥ th·ªÉ xem t·∫°i m·ª•c g√≥i c·ªßa t√¥i.'
                : 'ƒê√£ thanh to√°n g√≥i. H·ªá th·ªëng s·∫Ω k√≠ch ho·∫°t g√≥i cho xe ngay.')
              : 'ƒê√£ thanh to√°n ƒë·∫∑t l·ªãch (PrePaid). B·∫°n c√≥ th·ªÉ ki·ªÉm tra l·ªãch trong h·ªì s∆° c·ªßa m√¨nh.'}
          </div>
        </div>

        <div style={{display:'grid', gridTemplateColumns:'repeat(auto-fit,minmax(220px,1fr))', gap:12}}>
          <button onClick={go('/plans')} style={{background:'#059669', color:'#fff', padding:'12px 16px', borderRadius:12, border:'none'}}>üì¶ G√≥i c·ªßa t√¥i</button>
          <button onClick={go('/stations')} style={{background:'#1d4ed8', color:'#fff', padding:'12px 16px', borderRadius:12, border:'none'}}>üîã Xem tr·∫°m</button>
          <button onClick={go('/home')} style={{background: theme==='dark'?'#374151':'#f1f5f9', color: theme==='dark'?'#fff':'#111827', padding:'12px 16px', borderRadius:12, border:'1px solid #e5e7eb'}}>üè† Trang ch·ªß</button>
        </div>
      </div>

      <Footer />
    </div>
  );
}
